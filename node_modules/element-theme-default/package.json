{
  "_args": [
    [
      {
        "raw": "element-theme-default@git+https://github.com/Molunerfinn/theme-default.git",
        "scope": null,
        "escapedName": "element-theme-default",
        "name": "element-theme-default",
        "rawSpec": "git+https://github.com/Molunerfinn/theme-default.git",
        "spec": "git+https://github.com/Molunerfinn/theme-default.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:Molunerfinn/theme-default.git",
          "sshUrl": "git+ssh://git@github.com/Molunerfinn/theme-default.git",
          "httpsUrl": "git+https://github.com/Molunerfinn/theme-default.git",
          "gitUrl": "git://github.com/Molunerfinn/theme-default.git",
          "shortcut": "github:Molunerfinn/theme-default",
          "directUrl": "https://raw.githubusercontent.com/Molunerfinn/theme-default/master/package.json"
        }
      },
      "D:\\projectback"
    ]
  ],
  "_from": "git+https://github.com/Molunerfinn/theme-default.git",
  "_id": "element-theme-default@1.1.5",
  "_inCache": true,
  "_location": "/element-theme-default",
  "_phantomChildren": {},
  "_requested": {
    "raw": "element-theme-default@git+https://github.com/Molunerfinn/theme-default.git",
    "scope": null,
    "escapedName": "element-theme-default",
    "name": "element-theme-default",
    "rawSpec": "git+https://github.com/Molunerfinn/theme-default.git",
    "spec": "git+https://github.com/Molunerfinn/theme-default.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:Molunerfinn/theme-default.git",
      "sshUrl": "git+ssh://git@github.com/Molunerfinn/theme-default.git",
      "httpsUrl": "git+https://github.com/Molunerfinn/theme-default.git",
      "gitUrl": "git://github.com/Molunerfinn/theme-default.git",
      "shortcut": "github:Molunerfinn/theme-default",
      "directUrl": "https://raw.githubusercontent.com/Molunerfinn/theme-default/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "git+https://github.com/Molunerfinn/theme-default.git#12f13b9837e0b6dfbeab62690fb47885c3eb8e04",
  "_shasum": "7d0aba5d364cce1b4610c5fd0e51129e67916ca8",
  "_shrinkwrap": null,
  "_spec": "element-theme-default@git+https://github.com/Molunerfinn/theme-default.git",
  "_where": "D:\\projectback",
  "author": {
    "name": "haiping.zeng",
    "email": "qingwei.li@ele.me"
  },
  "bugs": {
    "url": "https://github.com/ElementUI/theme-default/issues"
  },
  "dependencies": {},
  "description": "Element component default theme.",
  "devDependencies": {
    "gulp": "^3.9.1",
    "gulp-cssmin": "^0.1.7",
    "gulp-postcss": "^6.1.1",
    "postcss-salad": "^1.0.5"
  },
  "files": [
    "lib",
    "src"
  ],
  "gitHead": "12f13b9837e0b6dfbeab62690fb47885c3eb8e04",
  "homepage": "https://github.com/ElementUI/theme-default#readme",
  "keywords": [
    "element",
    "theme"
  ],
  "license": "MIT",
  "main": "lib/index.css",
  "name": "element-theme-default",
  "optionalDependencies": {},
  "readme": "# element-theme-default 语法解析\r\n\r\n[element-theme-default](https://github.com/ElementUI/theme-default)提供的工具和文档只能通过修改`element-variables.css`这个文件进行一些局部样式调整，比如整体的颜色风格，一些长宽、边距、圆角尺寸等。如果需要进行定制、二次开发的话，单纯修改`element-variables.css`是不够的。还需要修改`element-theme-default`的源码。在查看`element-theme-default`源码的时候发现了一些有趣的东西。记录如下，方便二次开发。\r\n\r\n首先是`element-theme-default`采用的是下一代CSS风格的开发方式，用了基于PostCss的[Post-salad](https://github.com/ElemeFE/postcss-salad)来编译，而不是我之前认为的SCSS\\LESS等预处理。不过总体而言如果有预处理的经验，还是能够很快上手。\r\n\r\n几个显著特征：\r\n\r\n- 采用var进行全局样式变量定义\r\n- 支持@import引入外部css\r\n- 支持层级嵌套书写\r\n- 支持一些独特的语法\r\n\r\n一些独特的语法列举如下：\r\n\r\n1.`@component-namespace` 后面跟着的通常是`el`，会通知整个组件的class前缀渲染为`el`\r\n\r\n以下的部分是跟在`@component-namespace`层级之后,也就是都在`@component-namespace el {...}`花括号内。\r\n\r\n2.`@b` 后面跟着的class会渲染为：`el-class`。例如：\r\n```css\r\n@b alert{...}\r\n```\r\n会被渲染为\r\n```css\r\nel-alert{...}\r\n```\r\n\r\n3.`@modifier`或者`@m`后面跟着的class会被渲染为：`--class`。例如：\r\n\r\n```css\r\n@b alert{\r\n  @modifier info{...}\r\n  @m warning{...}\r\n}\r\n```\r\n会被渲染为\r\n```\r\nel-alert--info{...}\r\nel-alert--warning{...}\r\n```\r\n\r\n4.`@e`后面跟着的class会被渲染为：`__class`。例如：\r\n```css\r\n@b alert{\r\n  @e content{...}\r\n}\r\n```\r\n会被渲染为\r\n```css\r\nel-alert__content{...}\r\n```\r\n\r\n5.`@when`后面跟着的class会被渲染为：`.is-class`。例如：\r\n```css\r\n@b alert{\r\n  @e title{\r\n    @when bold {...}\r\n  }\r\n}\r\n```\r\n会被渲染为\r\n```css\r\nel-alert__title.is-bold{...}\r\n```\r\n\r\n6.`@mixin button-size` 后面跟着四个值，分别代表是padding上下、padding左右，font-size，border-radius。\r\n\r\n例如：\r\n```css\r\n@b button{\r\n  @mixin button-size 10px 20px 30px 40px;\r\n}\r\n```\r\n会被渲染为\r\n```css\r\n.el-button{\r\n  padding: 10px 20px;\r\n  font-size: 30px;\r\n  border-radius: 40px;\r\n}\r\n```\r\n7.`@mixin button-variant`后面跟着3个值，分别代表color、background-color、border-color。同时还会渲染一系列的hover\\active\\focus等颜色的深浅变化。\r\n例如：\r\n```css\r\n@b button {\r\n  @mixin button-variant white blue black;\r\n}\r\n```\r\n会被渲染为：\r\n```css\r\n.el-button{\r\n  color: white;\r\n  background-color: blue;\r\n  border-color: black;\r\n}\r\n\r\n.el-button:hover,\r\n.el-button:focus{...}\r\n\r\n/* 一系列颜色变化 */\r\n......\r\n```\r\n\r\n8.`tint()`和`shade()`函数，分别用来使颜色提升亮度、颜色降低亮度用的。接受两个参数，第一个是颜色值，第二个是明暗百分比。\r\n\r\n例如：\r\n```css\r\n.foo {\r\n  color: tint(#BADA55, 42%);\r\n}\r\n\r\n.bar {\r\n  background-color: shade(#663399, 42%);\r\n}\r\n```\r\n会被渲染为：\r\n```css\r\n.foo {\r\n  color: #e2efb7;\r\n}\r\n\r\n.bar {\r\n  background-color: #2a1540;\r\n}\r\n```\r\n\r\n# element-theme-default 二次开发指南\r\n\r\n官方给出的[例子](http://element.eleme.io/#/zh-CN/component/custom-theme)目前还有一些问题，由于缺少了`vue-popup`组件，在`et --watch`的时候会报错。\r\n\r\n我fork的仓库里加入了`vue-popup`的组件，在官方解决这个问题之前暂时可以采用如下方式（目前跟官方仓库保持同步）：\r\n\r\n## 首先是安装工具：\r\n\r\n```\r\nnpm i element-theme -g\r\n```\r\n\r\n## 然后安装默认主题（本仓库）：\r\n\r\n```\r\nnpm i https://github.com/Molunerfinn/theme-default.git -D\r\n```\r\n\r\n## 初始化变量文件\r\n\r\n```\r\net -i\r\n```\r\n如果使用默认配置，执行后当前目录会有一个`element-variables.css`文件。内部包含了主题所用到的所有变量，它们使用 CSS4 的风格定义。大致结构如下：\r\n```css\r\n:root {\r\n\r\n  /* Colors\r\n  -------------------------- */\r\n  --color-primary: #20a0ff;\r\n  --color-success: #13ce66;\r\n  --color-warning: #f7ba2a;\r\n  --color-danger: #ff4949;\r\n  --color-info: #50BFFF;\r\n  --color-blue: #2e90fe;\r\n  --color-blue-light: #5da9ff;\r\n  --color-blue-lighter: rgba(var(--color-blue), 0.12);\r\n  --color-white: #fff;\r\n  --color-black: #000;\r\n  --color-grey: #C0CCDA;\r\n```\r\n\r\n## 修改变量\r\n\r\n可以通过修改`element-variables.css`文件里的变量，即可改变整体风格。\r\n\r\n## 修改源码\r\n\r\n进入`node_modules/element-theme-default/src`目录下修改相应文件的代码即可。\r\n\r\n## 编译主题\r\n\r\n保存文件后，到命令行里执行 et 编译主题，如果你想启用 watch 模式，实时编译主题，增加 -w 参数。\r\n\r\n```\r\net -w\r\n```\r\n\r\n**注意：**修改源码的时候不会触发编译的watch模式，需要手动再保存一遍`element-variables.css`这个文件才可以触发编译效果。\r\n\r\n开发愉快~\r\n\r\n-------\r\n\r\n\r\n# element-theme-default\r\n> element component defualt theme.\r\n\r\n\r\n## Installation\r\n```shell\r\nnpm i element-theme-default -S\r\n```\r\n\r\n## Usage\r\n\r\nUse Sass Or postcss-import\r\n```css\r\n@import 'element-theme-default';\r\n```\r\n\r\nOr Use webpack\r\n```javascript\r\nimport 'element-theme-default';\r\n```\r\n\r\nOr\r\n```html\r\n<link rel=\"stylesheet\" href=\"path/to/node_modules/element-theme-default/lib/index.css\">\r\n```\r\n\r\n##  Import your need\r\n```javascript\r\nimport 'element-theme-default/lib/input.css';\r\nimport 'element-theme-default/lib/select.css';\r\n\r\n// ...\r\n```\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ElementUI/theme-default.git"
  },
  "scripts": {
    "build": "gulp build"
  },
  "style": "lib/index.css",
  "version": "1.1.5"
}
